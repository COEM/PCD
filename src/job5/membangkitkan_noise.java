/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package job5;

import job4.*;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javafx.stage.FileChooser;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author Wiki
 */
public class membangkitkan_noise extends javax.swing.JFrame {

    /**
     * Creates new form open_image
     */
    String sumberGambar, gb1, gb2;
    Image image;
    Dimension size;
    BufferedImage prosesimage, prosesimage2, prosesimage3;
    double s;

    public membangkitkan_noise() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        fc = new javax.swing.JFileChooser();
        jFrame1 = new javax.swing.JFrame();
        jScrollPane3 = new javax.swing.JScrollPane();
        image3 = new javax.swing.JLabel();
        zoom3 = new javax.swing.JSlider();
        zoomdes3 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        image1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        image2 = new javax.swing.JLabel();
        zoom1 = new javax.swing.JSlider();
        zoom2 = new javax.swing.JSlider();
        zoomdes1 = new javax.swing.JTextField();
        zoomdes2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jScrollBar1 = new javax.swing.JScrollBar();
        jScrollBar2 = new javax.swing.JScrollBar();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jTextField4 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenuItem16 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem17 = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jFrame1.setSize(new java.awt.Dimension(300, 350));

        image3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        image3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jScrollPane3.setViewportView(image3);

        zoom3.setMaximum(400);
        zoom3.setMinimum(1);
        zoom3.setValue(1);
        zoom3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                zoom3StateChanged(evt);
            }
        });

        zoomdes3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomdes3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jFrame1Layout.createSequentialGroup()
                        .addComponent(zoom3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(zoomdes3))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(zoom3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(zoomdes3))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        image1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        image1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jScrollPane1.setViewportView(image1);

        image2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        image2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jScrollPane2.setViewportView(image2);

        zoom1.setMaximum(400);
        zoom1.setMinimum(1);
        zoom1.setValue(1);
        zoom1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                zoom1StateChanged(evt);
            }
        });

        zoom2.setMaximum(400);
        zoom2.setMinimum(1);
        zoom2.setValue(1);
        zoom2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                zoom2StateChanged(evt);
            }
        });

        zoomdes1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomdes1ActionPerformed(evt);
            }
        });

        zoomdes2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomdes2ActionPerformed(evt);
            }
        });

        jButton1.setText("Grayscale");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Biner");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Invers");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Invers Log");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Thresholding");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel1.setText("Thresholding");

        jLabel2.setText("C");

        jLabel3.setText("Y");

        jButton6.setText("Histogram");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jScrollBar1.setMaximum(50);
        jScrollBar1.setMinimum(-50);
        jScrollBar1.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
        jScrollBar1.setUnitIncrement(10);

        jScrollBar2.setMaximum(10);
        jScrollBar2.setMinimum(-10);
        jScrollBar2.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
        jScrollBar2.setVisibleAmount(1);

        jButton7.setText("Brightness");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Contrast");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Histogram Equalization");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jLabel4.setText("Noise");

        jMenu1.setText("File");

        jMenuItem1.setText("Open");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Open in New Window");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem3.setText("a");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("b");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setText("c");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem6.setText("d");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setText("e");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("LPF");

        jMenuItem8.setText("3x3rata-rata");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem8);

        jMenuItem9.setText("3x3Koef");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem9);

        jMenuItem10.setText("3x3Koef2");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem10);

        jMenuItem13.setText("5x5rata-rata");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem13);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("HPF");

        jMenuItem11.setText("HPF 1");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem11);

        jMenuItem12.setText("HPF 2");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem12);

        jMenuBar1.add(jMenu4);

        jMenu5.setText("Noise");

        jMenuItem14.setText("Noise Uniform");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem14);

        jMenuItem15.setText("Noise Salt & Pepper");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem15ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem15);

        jMenuItem16.setText("Noise Speckel");
        jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem16ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem16);

        jMenuBar1.add(jMenu5);

        jMenu6.setText("Noise Reduction");

        jMenuItem17.setText("Filter Rata-rata");
        jMenuItem17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem17ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem17);

        jMenuBar1.add(jMenu6);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(zoom1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(zoomdes1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField4, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                            .addComponent(jTextField1)
                            .addComponent(jTextField2)
                            .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(zoom2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(zoomdes2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollBar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton9)
                            .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField5, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                            .addComponent(jTextField6))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                            .addComponent(jScrollPane1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(zoom1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(zoom2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(zoomdes1)
                            .addComponent(zoomdes2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton9)
                        .addContainerGap(204, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        image1.setEnabled(false);
        image2.setEnabled(false);
        image3.setEnabled(false);
        zoom1.setEnabled(false);
        zoom2.setEnabled(false);
        zoom3.setEnabled(false);
        zoomdes1.setEnabled(false);
        zoomdes2.setEnabled(false);
        zoomdes3.setEnabled(false);
    }//GEN-LAST:event_formWindowOpened

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        int open = fc.showOpenDialog(jPanel1);
        if (open == JFileChooser.APPROVE_OPTION) {
            image1.setEnabled(true);
            zoom1.setEnabled(true);
            zoomdes1.setEnabled(true);
            sumberGambar = fc.getSelectedFile().getPath();

            image = new ImageIcon(sumberGambar).getImage();
            size = new Dimension();
            size.width = image.getWidth(null);
            size.height = image.getHeight(null);
            setPreferredSize(size);

            zoom1.setValue(100);

            prosesimage = new BufferedImage(size.width * zoom1.getValue() / 100, size.height * zoom1.getValue() / 100, BufferedImage.TYPE_INT_RGB);
            Graphics g = prosesimage.getGraphics();
            g.drawImage(image, 0, 0, size.width * zoom1.getValue() / 100, size.height * zoom1.getValue() / 100, null);
            image1.setIcon(new ImageIcon(prosesimage));
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void zoom1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_zoom1StateChanged
        // TODO add your handling code here:
        prosesimage = new BufferedImage(size.width * zoom1.getValue() / 100, size.height * zoom1.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        Graphics g = prosesimage.getGraphics();
        g.drawImage(image, 0, 0, size.width * zoom1.getValue() / 100, size.height * zoom1.getValue() / 100, null);
        zoomdes1.setText(Integer.toString(zoom1.getValue()));
        image1.setIcon(new ImageIcon(prosesimage));
    }//GEN-LAST:event_zoom1StateChanged

    private void zoomdes1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomdes1ActionPerformed
        // TODO add your handling code here:
        zoom1.setValue(Integer.parseInt(zoomdes1.getText()));
    }//GEN-LAST:event_zoomdes1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        int open = fc.showOpenDialog(jPanel1);
        if (open == JFileChooser.APPROVE_OPTION) {
            jFrame1.setVisible(true);
            image3.setEnabled(true);
            zoom3.setEnabled(true);
            zoomdes3.setEnabled(true);
            sumberGambar = fc.getSelectedFile().getPath();

            image = new ImageIcon(sumberGambar).getImage();
            size = new Dimension();
            size.width = image.getWidth(null);
            size.height = image.getHeight(null);
            setPreferredSize(size);

            zoom3.setValue(100);

            prosesimage = new BufferedImage(size.width * zoom3.getValue() / 100, size.height * zoom3.getValue() / 100, BufferedImage.TYPE_INT_RGB);
            Graphics g = prosesimage.getGraphics();
            g.drawImage(image, 0, 0, size.width * zoom3.getValue() / 100, size.height * zoom3.getValue() / 100, null);
            image3.setIcon(new ImageIcon(prosesimage));
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void zoom3StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_zoom3StateChanged
        // TODO add your handling code here:
        prosesimage = new BufferedImage(size.width * zoom3.getValue() / 100, size.height * zoom3.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        Graphics g = prosesimage.getGraphics();
        g.drawImage(image, 0, 0, size.width * zoom3.getValue() / 100, size.height * zoom3.getValue() / 100, null);
        zoomdes3.setText(Integer.toString(zoom3.getValue()));
        image3.setIcon(new ImageIcon(prosesimage));
    }//GEN-LAST:event_zoom3StateChanged

    private void zoomdes3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomdes3ActionPerformed
        // TODO add your handling code here:
        zoom3.setValue(Integer.parseInt(zoomdes3.getText()));
    }//GEN-LAST:event_zoomdes3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        image2.setEnabled(true);
        zoom2.setEnabled(true);
        zoomdes2.setEnabled(true);
        image = new ImageIcon(sumberGambar).getImage();
        size = new Dimension();
        size.width = image.getWidth(null);
        size.height = image.getHeight(null);
        setPreferredSize(size);

        if (zoom2.getValue() == 1) {
            zoom2.setValue(Integer.parseInt(zoomdes1.getText()));
        } else {
            zoom2.setValue(Integer.parseInt(zoomdes2.getText()));
        }

        prosesimage = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        Graphics g = prosesimage.getGraphics();
        g.drawImage(image, 0, 0, size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, null);

        for (int x = 0; x < size.width * zoom2.getValue() / 100; x++) {
            for (int y = 0; y < size.height * zoom2.getValue() / 100; y++) {
                int RGB = prosesimage.getRGB(x, y);
                int alpha = (RGB << 24) & 0xFF;
                int red = (RGB >> 16) & 0xFF;
                int green = (RGB >> 8) & 0xFF;
                int blue = (RGB >> 0) & 0xFF;
                int avg = (red + green + blue) / 3;
                int gray = alpha | avg << 16 | avg << 8 | avg;
                prosesimage.setRGB(x, y, gray);
            }
        }
        image2.setIcon(new ImageIcon(prosesimage));
    }//GEN-LAST:event_jButton1ActionPerformed

    private void zoom2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_zoom2StateChanged
        // TODO add your handling code here:   
        prosesimage = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        Graphics g = prosesimage.getGraphics();
        g.drawImage(image, 0, 0, size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, null);
        zoomdes2.setText(Integer.toString(zoom2.getValue()));
        image2.setIcon(new ImageIcon(prosesimage));
    }//GEN-LAST:event_zoom2StateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        image2.setEnabled(true);
        zoom2.setEnabled(true);
        zoomdes2.setEnabled(true);
        image = new ImageIcon(sumberGambar).getImage();
        size = new Dimension();
        size.width = image.getWidth(null);
        size.height = image.getHeight(null);
        setPreferredSize(size);

        if (zoom2.getValue() == 1) {
            zoom2.setValue(Integer.parseInt(zoomdes1.getText()));
        } else {
            zoom2.setValue(Integer.parseInt(zoomdes2.getText()));
        }

        prosesimage = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        Graphics g = prosesimage.getGraphics();
        g.drawImage(image, 0, 0, size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, null);

        for (int x = 0; x < size.width * zoom2.getValue() / 100; x++) {
            for (int y = 0; y < size.height * zoom2.getValue() / 100; y++) {
                int RGB = prosesimage.getRGB(x, y);
                int alpha = (RGB << 24) & 0xFF;
                int red = (RGB >> 16) & 0xFF;
                int green = (RGB >> 8) & 0xFF;
                int blue = (RGB >> 0) & 0xFF;
                int avg = (red + green + blue) / 3;
                int gray = 0;
                if (avg < 128) {
                    gray = 0;
                } else if (avg > 128) {
                    gray = 255;
                }
                int binergray = gray + (gray << 8) + (gray << 16);
                prosesimage.setRGB(x, y, binergray);
            }
        }
        image2.setIcon(new ImageIcon(prosesimage));
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        image2.setEnabled(true);
        zoom2.setEnabled(true);
        zoomdes2.setEnabled(true);
        image = new ImageIcon(sumberGambar).getImage();
        size = new Dimension();
        size.width = image.getWidth(null);
        size.height = image.getHeight(null);
        setPreferredSize(size);

        if (zoom2.getValue() == 1) {
            zoom2.setValue(Integer.parseInt(zoomdes1.getText()));
        } else {
            zoom2.setValue(Integer.parseInt(zoomdes2.getText()));
        }

        prosesimage = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        prosesimage2 = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        Graphics g = prosesimage.getGraphics();
        g.drawImage(image, 0, 0, size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, null);

        for (int x = 0; x < size.width * zoom2.getValue() / 100; x++) {
            for (int y = 0; y < size.height * zoom2.getValue() / 100; y++) {
                int RGB = prosesimage.getRGB(x, y);
                int alpha = (RGB << 24) & 0xFF;
                int red = (RGB >> 16) & 0xFF;
                int green = (RGB >> 8) & 0xFF;
                int blue = (RGB >> 0) & 0xFF;
                int avg = (red + green + blue) / 3;
                int gray = alpha | avg << 16 | avg << 8 | avg;
                prosesimage.setRGB(x, y, gray);
                int inv = 255 - avg;
                int invpx = alpha | inv << 16 | inv << 8 | inv;
                prosesimage2.setRGB(x, y, invpx);
            }
        }
        image1.setIcon(new ImageIcon(prosesimage));
        image2.setIcon(new ImageIcon(prosesimage2));
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        image2.setEnabled(true);
        zoom2.setEnabled(true);
        zoomdes2.setEnabled(true);
        image = new ImageIcon(sumberGambar).getImage();
        size = new Dimension();
        size.width = image.getWidth(null);
        size.height = image.getHeight(null);
        setPreferredSize(size);

        if (zoom2.getValue() == 1) {
            zoom2.setValue(Integer.parseInt(zoomdes1.getText()));
        } else {
            zoom2.setValue(Integer.parseInt(zoomdes2.getText()));
        }

        prosesimage = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        prosesimage2 = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        Graphics g = prosesimage.getGraphics();
        g.drawImage(image, 0, 0, size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, null);

        for (int x = 0; x < size.width * zoom2.getValue() / 100; x++) {
            for (int y = 0; y < size.height * zoom2.getValue() / 100; y++) {
                int RGB = prosesimage.getRGB(x, y);
                int alpha = (RGB << 24) & 0xFF;
                int red = (RGB >> 16) & 0xFF;
                int green = (RGB >> 8) & 0xFF;
                int blue = (RGB >> 0) & 0xFF;
                int avg = (red + green + blue) / 3;
                int gray = alpha | avg << 16 | avg << 8 | avg;
                prosesimage.setRGB(x, y, gray);
                int inv = (int) (Integer.parseInt(jTextField2.getText()) * (Math.log10(255 - avg + 1)));
                int invpx = alpha | inv << 16 | inv << 8 | inv;
                prosesimage2.setRGB(x, y, invpx);
            }
        }
        image1.setIcon(new ImageIcon(prosesimage));
        image2.setIcon(new ImageIcon(prosesimage2));
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        image2.setEnabled(true);
        zoom2.setEnabled(true);
        zoomdes2.setEnabled(true);
        image = new ImageIcon(sumberGambar).getImage();
        size = new Dimension();
        size.width = image.getWidth(null);
        size.height = image.getHeight(null);
        setPreferredSize(size);

        int th = Integer.parseInt(jTextField1.getText());
        int a;

        if (zoom2.getValue() == 1) {
            zoom2.setValue(Integer.parseInt(zoomdes1.getText()));
        } else {
            zoom2.setValue(Integer.parseInt(zoomdes2.getText()));
        }

        prosesimage = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        Graphics g = prosesimage.getGraphics();
        g.drawImage(image, 0, 0, size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, null);

        for (int x = 0; x < size.width * zoom2.getValue() / 100; x++) {
            for (int y = 0; y < size.height * zoom2.getValue() / 100; y++) {
                int RGB = prosesimage.getRGB(x, y);
                int alpha = (RGB << 24) & 0xFF;
                int red = (RGB >> 16) & 0xFF;
                int green = (RGB >> 8) & 0xFF;
                int blue = (RGB >> 0) & 0xFF;
                int avg = (red + green + blue) / 3;
                a = (int) (256 / th);
                avg = a * (int) (avg / a);
                int gray = alpha | avg << 16 | avg << 8 | avg;
                prosesimage.setRGB(x, y, gray);
            }
        }
        image2.setIcon(new ImageIcon(prosesimage));
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        // mengaktifkan komponen yang dinonaktifkan pada saat program dijalankan
        image2.setEnabled(true);
        zoom2.setEnabled(true);
        zoomdes2.setEnabled(true);

        //mengambil nilai ukuran gambar yang sebenarnya
        image = new ImageIcon(sumberGambar).getImage();
        size = new Dimension();
        size.width = image.getWidth(null);
        size.height = image.getHeight(null);
        setPreferredSize(size);

        /*jika value pada slider pertama bernilai 1 maka gambar akan mengikuti ukuran
        gambar yang pertama jika tidak ukuran gambar akan disesuaikan dengan value slider kedua
         */
        if (zoom2.getValue() == 1) {
            zoom2.setValue(Integer.parseInt(zoomdes1.getText()));
        } else {
            zoom2.setValue(Integer.parseInt(zoomdes2.getText()));
        }

        //memproses gambar sebenarnya dengan mengambil ukuran dan hasil gambar sebenarnya
        prosesimage = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        Graphics g = prosesimage.getGraphics();
        g.drawImage(image, 0, 0, size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, null);

        //melakukan penyeleksian warna pada setiap pixel
        for (int x = 0; x < size.width * zoom2.getValue() / 100; x++) {
            for (int y = 0; y < size.height * zoom2.getValue() / 100; y++) {
                //mengambil nilai warna pada setiap pixel
                int RGB = prosesimage.getRGB(x, y);

                /*menentukan bit-bit untuk menentukan posisi setiap warna dan
                dan menghasilkan filter yang digunakan untuk mengubah warna gambar
                 */
                int alpha = (RGB << 24) & 0xFF;
                int red = (RGB >> 16) & 0xFF;
                int green = (RGB >> 8) & 0xFF;
                int blue = (RGB >> 0) & 0xFF;
                int avg = (int) (0.5 * red + 0.2 * green + 0.3 * blue);
                int gray = alpha | avg << 16 | avg << 8 | avg;
                prosesimage.setRGB(x, y, gray);
            }
        }
        image2.setIcon(new ImageIcon(prosesimage));
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        // mengaktifkan komponen yang dinonaktifkan pada saat program dijalankan
        image2.setEnabled(true);
        zoom2.setEnabled(true);
        zoomdes2.setEnabled(true);

        //mengambil nilai ukuran gambar yang sebenarnya
        image = new ImageIcon(sumberGambar).getImage();
        size = new Dimension();
        size.width = image.getWidth(null);
        size.height = image.getHeight(null);
        setPreferredSize(size);

        /*jika value pada slider pertama bernilai 1 maka gambar akan mengikuti ukuran
        gambar yang pertama jika tidak ukuran gambar akan disesuaikan dengan value slider kedua
         */
        if (zoom2.getValue() == 1) {
            zoom2.setValue(Integer.parseInt(zoomdes1.getText()));
        } else {
            zoom2.setValue(Integer.parseInt(zoomdes2.getText()));
        }

        //memproses gambar sebenarnya dengan mengambil ukuran dan hasil gambar sebenarnya
        prosesimage = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        Graphics g = prosesimage.getGraphics();
        g.drawImage(image, 0, 0, size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, null);

        //melakukan penyeleksian warna pada setiap pixel
        for (int x = 0; x < size.width * zoom2.getValue() / 100; x++) {
            for (int y = 0; y < size.height * zoom2.getValue() / 100; y++) {
                //mengambil nilai warna pada setiap pixel
                int RGB = prosesimage.getRGB(x, y);

                /*menentukan bit-bit untuk menentukan posisi setiap warna dan
                dan menghasilkan filter yang digunakan untuk mengubah warna gambar
                 */
                int alpha = (RGB << 24) & 0xFF;
                int red = (RGB >> 16) & 0xFF;
                int green = (RGB >> 8) & 0xFF;
                int blue = (RGB >> 0) & 0xFF;
                int avg = (int) (0.2 * red + 0.5 * green + 0.3 * blue);
                int gray = alpha | avg << 16 | avg << 8 | avg;
                prosesimage.setRGB(x, y, gray);
            }
        }
        image2.setIcon(new ImageIcon(prosesimage));
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        // mengaktifkan komponen yang dinonaktifkan pada saat program dijalankan
        image2.setEnabled(true);
        zoom2.setEnabled(true);
        zoomdes2.setEnabled(true);

        //mengambil nilai ukuran gambar yang sebenarnya
        image = new ImageIcon(sumberGambar).getImage();
        size = new Dimension();
        size.width = image.getWidth(null);
        size.height = image.getHeight(null);
        setPreferredSize(size);

        /*jika value pada slider pertama bernilai 1 maka gambar akan mengikuti ukuran
        gambar yang pertama jika tidak ukuran gambar akan disesuaikan dengan value slider kedua
         */
        if (zoom2.getValue() == 1) {
            zoom2.setValue(Integer.parseInt(zoomdes1.getText()));
        } else {
            zoom2.setValue(Integer.parseInt(zoomdes2.getText()));
        }

        //memproses gambar sebenarnya dengan mengambil ukuran dan hasil gambar sebenarnya
        prosesimage = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        Graphics g = prosesimage.getGraphics();
        g.drawImage(image, 0, 0, size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, null);

        //melakukan penyeleksian warna pada setiap pixel
        for (int x = 0; x < size.width * zoom2.getValue() / 100; x++) {
            for (int y = 0; y < size.height * zoom2.getValue() / 100; y++) {
                //mengambil nilai warna pada setiap pixel
                int RGB = prosesimage.getRGB(x, y);

                /*menentukan bit-bit untuk menentukan posisi setiap warna dan
                dan menghasilkan filter yang digunakan untuk mengubah warna gambar
                 */
                int alpha = (RGB << 24) & 0xFF;
                int red = (RGB >> 16) & 0xFF;
                int green = (RGB >> 8) & 0xFF;
                int blue = (RGB >> 0) & 0xFF;
                int avg = (int) (0.2 * red + 0.3 * green + 0.5 * blue);
                int gray = alpha | avg << 16 | avg << 8 | avg;
                prosesimage.setRGB(x, y, gray);
            }
        }
        image2.setIcon(new ImageIcon(prosesimage));
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        // mengaktifkan komponen yang dinonaktifkan pada saat program dijalankan
        image2.setEnabled(true);
        zoom2.setEnabled(true);
        zoomdes2.setEnabled(true);

        //mengambil nilai ukuran gambar yang sebenarnya
        image = new ImageIcon(sumberGambar).getImage();
        size = new Dimension();
        size.width = image.getWidth(null);
        size.height = image.getHeight(null);
        setPreferredSize(size);

        /*jika value pada slider pertama bernilai 1 maka gambar akan mengikuti ukuran
        gambar yang pertama jika tidak ukuran gambar akan disesuaikan dengan value slider kedua
         */
        if (zoom2.getValue() == 1) {
            zoom2.setValue(Integer.parseInt(zoomdes1.getText()));
        } else {
            zoom2.setValue(Integer.parseInt(zoomdes2.getText()));
        }

        //memproses gambar sebenarnya dengan mengambil ukuran dan hasil gambar sebenarnya
        prosesimage = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        Graphics g = prosesimage.getGraphics();
        g.drawImage(image, 0, 0, size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, null);

        //melakukan penyeleksian warna pada setiap pixel
        for (int x = 0; x < size.width * zoom2.getValue() / 100; x++) {
            for (int y = 0; y < size.height * zoom2.getValue() / 100; y++) {
                //mengambil nilai warna pada setiap pixel
                int RGB = prosesimage.getRGB(x, y);

                /*menentukan bit-bit untuk menentukan posisi setiap warna dan
                dan menghasilkan filter yang digunakan untuk mengubah warna gambar
                 */
                int alpha = (RGB << 24) & 0xFF;
                int red = (RGB >> 16) & 0xFF;
                int green = (RGB >> 8) & 0xFF;
                int blue = (RGB >> 0) & 0xFF;
                int avg = (int) (0.5 * red + 0.5 * green + 0 * blue);
                int gray = alpha | avg << 16 | avg << 8 | avg;
                prosesimage.setRGB(x, y, gray);
            }
        }
        image2.setIcon(new ImageIcon(prosesimage));
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        // mengaktifkan komponen yang dinonaktifkan pada saat program dijalankan
        image2.setEnabled(true);
        zoom2.setEnabled(true);
        zoomdes2.setEnabled(true);

        //mengambil nilai ukuran gambar yang sebenarnya
        image = new ImageIcon(sumberGambar).getImage();
        size = new Dimension();
        size.width = image.getWidth(null);
        size.height = image.getHeight(null);
        setPreferredSize(size);

        /*jika value pada slider pertama bernilai 1 maka gambar akan mengikuti ukuran
        gambar yang pertama jika tidak ukuran gambar akan disesuaikan dengan value slider kedua
         */
        if (zoom2.getValue() == 1) {
            zoom2.setValue(Integer.parseInt(zoomdes1.getText()));
        } else {
            zoom2.setValue(Integer.parseInt(zoomdes2.getText()));
        }

        //memproses gambar sebenarnya dengan mengambil ukuran dan hasil gambar sebenarnya
        prosesimage = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        Graphics g = prosesimage.getGraphics();
        g.drawImage(image, 0, 0, size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, null);

        //melakukan penyeleksian warna pada setiap pixel
        for (int x = 0; x < size.width * zoom2.getValue() / 100; x++) {
            for (int y = 0; y < size.height * zoom2.getValue() / 100; y++) {
                //mengambil nilai warna pada setiap pixel
                int RGB = prosesimage.getRGB(x, y);

                /*menentukan bit-bit untuk menentukan posisi setiap warna dan
                dan menghasilkan filter yang digunakan untuk mengubah warna gambar
                 */
                int alpha = (RGB << 24) & 0xFF;
                int red = (RGB >> 16) & 0xFF;
                int green = (RGB >> 8) & 0xFF;
                int blue = (RGB >> 0) & 0xFF;
                int avg = (int) (0.5 * red + 0 * green + 0.5 * blue);
                int gray = alpha | avg << 16 | avg << 8 | avg;
                prosesimage.setRGB(x, y, gray);
            }
        }
        image2.setIcon(new ImageIcon(prosesimage));
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        image2.setEnabled(true);
        zoom2.setEnabled(true);
        zoomdes2.setEnabled(true);
        image = new ImageIcon(sumberGambar).getImage();
        size = new Dimension();
        size.width = image.getWidth(null);
        size.height = image.getHeight(null);
        setPreferredSize(size);

        if (zoom2.getValue() == 1) {
            zoom2.setValue(Integer.parseInt(zoomdes1.getText()));
        } else {
            zoom2.setValue(Integer.parseInt(zoomdes2.getText()));
        }

        prosesimage = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        Graphics g = prosesimage.getGraphics();
        g.drawImage(image, 0, 0, size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, null);

        for (int x = 0; x < size.width * zoom2.getValue() / 100; x++) {
            for (int y = 0; y < size.height * zoom2.getValue() / 100; y++) {
                int RGB = prosesimage.getRGB(x, y);
                int alpha = (RGB << 24) & 0xFF;
                int red = (RGB >> 16) & 0xFF;
                int green = (RGB >> 8) & 0xFF;
                int blue = (RGB >> 0) & 0xFF;
                int avg = (red + green + blue) / 3;
                int gray = alpha | avg << 16 | avg << 8 | avg;
                prosesimage.setRGB(x, y, gray);
            }
        }
        image2.setIcon(new ImageIcon(prosesimage));
        drawHistogram(prosesimage, gb1);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        image2.setEnabled(true);
        zoom2.setEnabled(true);
        zoomdes2.setEnabled(true);
        image = new ImageIcon(sumberGambar).getImage();
        int add = jScrollBar1.getValue();
        size = new Dimension();
        size.width = image.getWidth(null);
        size.height = image.getHeight(null);
        setPreferredSize(size);

        if (zoom2.getValue() == 1) {
            zoom2.setValue(Integer.parseInt(zoomdes1.getText()));
        } else {
            zoom2.setValue(Integer.parseInt(zoomdes2.getText()));
        }

        prosesimage = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        Graphics g = prosesimage.getGraphics();
        g.drawImage(image, 0, 0, size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, null);

        for (int x = 0; x < size.width * zoom2.getValue() / 100; x++) {
            for (int y = 0; y < size.height * zoom2.getValue() / 100; y++) {
                int RGB = prosesimage.getRGB(x, y);
                int alpha = (RGB << 24) & 0xFF;
                int red = (RGB >> 16) & 0xFF;
                int green = (RGB >> 8) & 0xFF;
                int blue = (RGB >> 0) & 0xFF;
                int avg = (red + green + blue) / 3;
                red = red + add;
                green = green + add;
                blue = blue + add;
                if (red < 0) {
                    red = 0;
                }
                if (green < 0) {
                    green = 0;
                }
                if (blue < 0) {
                    blue = 0;
                }
                if (red > 255) {
                    red = 255;
                }
                if (green > 255) {
                    green = 255;
                }
                if (blue > 255) {
                    blue = 255;
                }
                int rgb2 = (alpha >> 24) | (red << 16) | (green << 8) | blue;
                prosesimage.setRGB(x, y, rgb2);
            }
        }
        image2.setIcon(new ImageIcon(prosesimage));
        drawHistogram(prosesimage, gb1);
        drawHistogram();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        image2.setEnabled(true);
        zoom2.setEnabled(true);
        zoomdes2.setEnabled(true);
        image = new ImageIcon(sumberGambar).getImage();
        int add = jScrollBar2.getValue();
        size = new Dimension();
        size.width = image.getWidth(null);
        size.height = image.getHeight(null);
        setPreferredSize(size);

        if (zoom2.getValue() == 1) {
            zoom2.setValue(Integer.parseInt(zoomdes1.getText()));
        } else {
            zoom2.setValue(Integer.parseInt(zoomdes2.getText()));
        }

        prosesimage = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        Graphics g = prosesimage.getGraphics();
        g.drawImage(image, 0, 0, size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, null);

        for (int x = 0; x < size.width * zoom2.getValue() / 100; x++) {
            for (int y = 0; y < size.height * zoom2.getValue() / 100; y++) {
                int RGB = prosesimage.getRGB(x, y);
                int alpha = (RGB << 24) & 0xFF;
                int red = (RGB >> 16) & 0xFF;
                int green = (RGB >> 8) & 0xFF;
                int blue = (RGB >> 0) & 0xFF;
                int avg = (red + green + blue) / 3;
                red = red * add;
                green = green * add;
                blue = blue * add;
                if (red < 0) {
                    red = 0;
                }
                if (green < 0) {
                    green = 0;
                }
                if (blue < 0) {
                    blue = 0;
                }
                if (red > 255) {
                    red = 255;
                }
                if (green > 255) {
                    green = 255;
                }
                if (blue > 255) {
                    blue = 255;
                }
                int rgb2 = (alpha >> 24) | (red << 16) | (green << 8) | blue;
                prosesimage.setRGB(x, y, rgb2);
            }
        }
        image2.setIcon(new ImageIcon(prosesimage));
        drawHistogram(prosesimage, gb1);
        drawHistogram();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        image2.setEnabled(true);
        zoom2.setEnabled(true);
        zoomdes2.setEnabled(true);
        image = new ImageIcon(sumberGambar).getImage();
        size = new Dimension();
        size.width = image.getWidth(null);
        size.height = image.getHeight(null);
        setPreferredSize(size);

        if (zoom2.getValue() == 1) {
            zoom2.setValue(Integer.parseInt(zoomdes1.getText()));
        } else {
            zoom2.setValue(Integer.parseInt(zoomdes2.getText()));
        }

        prosesimage = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        prosesimage2 = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        Graphics g = prosesimage.getGraphics();
        g.drawImage(image, 0, 0, size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, null);

        int counthis[] = new int[256];
        int cumhis[] = new int[256];
        int tempg[][] = new int[size.width][size.height];
        int tempa[][] = new int[size.width][size.height];
        for (int x = 0; x < size.width * zoom2.getValue() / 100; x++) {
            for (int y = 0; y < size.height * zoom2.getValue() / 100; y++) {
                int RGB = prosesimage.getRGB(x, y);
                int alpha = (RGB << 24) & 0xFF;
                int red = (RGB >> 16) & 0xFF;
                int green = (RGB >> 8) & 0xFF;
                int blue = (RGB >> 0) & 0xFF;
                int avg = (red + green + blue) / 3;
                int gray = alpha | avg << 16 | avg << 8 | avg;
                counthis[avg]++;
                tempg[x][y] = avg;
                tempa[x][y] = alpha;
                prosesimage.setRGB(x, y, gray);
            }
        }
        int npixel = size.width * size.height;
        for (int k = 0; k < 256; k++) {
            s = 0;
            for (int j = 0; j <= k; j++) {
                s += ((double) counthis[j]) / ((double) npixel);
            }
            cumhis[k] = (int) (s * 255);
        }
        for (int x = 0; x < size.width * zoom2.getValue() / 100; x++) {
            for (int y = 0; y < size.height * zoom2.getValue() / 100; y++) {
                int rgb = prosesimage.getRGB(x, y);
                int alpha6 = (rgb << 24) & 0xFF;
                int red6 = (rgb >> 16) & 0xFF;
                int gryeq = cumhis[red6];
                int grayeq = alpha6 | gryeq << 16 | gryeq << 8 | gryeq;
                prosesimage2.setRGB(x, y, grayeq);
            }
        }
        image1.setIcon(new ImageIcon(prosesimage));
        image2.setIcon(new ImageIcon(prosesimage2));
        drawHistogram(prosesimage, gb1);
        drawHistogram(prosesimage2, gb2);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void zoomdes2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomdes2ActionPerformed
        // TODO add your handling code here:
        zoom2.setValue(Integer.parseInt(zoomdes2.getText()));
    }//GEN-LAST:event_zoomdes2ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        image2.setEnabled(true);
        zoom2.setEnabled(true);
        zoomdes2.setEnabled(true);
        image = new ImageIcon(sumberGambar).getImage();
        size = new Dimension();
        size.width = image.getWidth(null);
        size.height = image.getHeight(null);
        setPreferredSize(size);

        if (zoom2.getValue() == 1) {
            zoom2.setValue(Integer.parseInt(zoomdes1.getText()));
        } else {
            zoom2.setValue(Integer.parseInt(zoomdes2.getText()));
        }

        prosesimage = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        prosesimage2 = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        Graphics g = prosesimage.getGraphics();
        g.drawImage(image, 0, 0, size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, null);

        for (int x = 0; x < size.width * zoom2.getValue() / 100; x++) {
            for (int y = 0; y < size.height * zoom2.getValue() / 100; y++) {
                int RGB = prosesimage.getRGB(x, y);
                int alpha = (RGB << 24) & 0xFF;
                int red = (RGB >> 16) & 0xFF;
                int green = (RGB >> 8) & 0xFF;
                int blue = (RGB >> 0) & 0xFF;
                int avg = (red + green + blue) / 3;
                int gray = alpha | avg << 16 | avg << 8 | avg;
                prosesimage.setRGB(x, y, gray);
            }
        }

        for (int v = 1; v <= size.height * zoom2.getValue() / 100 - 2; v++) {
            for (int u = 1; u <= size.width * zoom2.getValue() / 100 - 2; u++) {
                int sum = 0;
                int temp = 0;
                for (int j = -1; j <= 1; j++) {
                    for (int i = -1; i <= 1; i++) {
                        int RGB = prosesimage.getRGB(u + i, v + j);
                        int alpha = (RGB << 24) & 0xFF;
                        int red = (RGB >> 16) & 0xFF;
                        temp = alpha;
                        sum = sum + red;
                    }
                }
                int q = (int) Math.round(sum / 9.0);
                int gray2 = temp | q << 16 | q << 8 | q;
                prosesimage2.setRGB(u, v, gray2);
            }
        }
        image1.setIcon(new ImageIcon(prosesimage));
        image2.setIcon(new ImageIcon(prosesimage2));
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        image2.setEnabled(true);
        zoom2.setEnabled(true);
        zoomdes2.setEnabled(true);
        image = new ImageIcon(sumberGambar).getImage();
        size = new Dimension();
        size.width = image.getWidth(null);
        size.height = image.getHeight(null);
        setPreferredSize(size);

        if (zoom2.getValue() == 1) {
            zoom2.setValue(Integer.parseInt(zoomdes1.getText()));
        } else {
            zoom2.setValue(Integer.parseInt(zoomdes2.getText()));
        }

        prosesimage = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        prosesimage2 = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        Graphics g = prosesimage.getGraphics();
        g.drawImage(image, 0, 0, size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, null);

        double filter[][] = {
            {0.075, 0.125, 0.075},
            {0.125, 0.200, 0.125},
            {0.075, 0.125, 0.075}
        };
        for (int x = 0; x < size.width * zoom2.getValue() / 100; x++) {
            for (int y = 0; y < size.height * zoom2.getValue() / 100; y++) {
                int RGB = prosesimage.getRGB(x, y);
                int alpha = (RGB << 24) & 0xFF;
                int red = (RGB >> 16) & 0xFF;
                int green = (RGB >> 8) & 0xFF;
                int blue = (RGB >> 0) & 0xFF;
                int avg = (red + green + blue) / 3;
                int gray = alpha | avg << 16 | avg << 8 | avg;
                prosesimage.setRGB(x, y, gray);
            }
        }
        for (int v = 1; v <= size.height * zoom2.getValue() / 100 - 2; v++) {
            for (int u = 1; u <= size.width * zoom2.getValue() / 100 - 2; u++) {
                int sum = 0;
                int temp = 0;
                for (int j = -1; j <= 1; j++) {
                    for (int i = -1; i <= 1; i++) {
                        int RGB = prosesimage.getRGB(u + i, v + j);
                        int alpha = (RGB << 24) & 0xFF;
                        int red = (RGB >> 16) & 0xFF;
                        temp = alpha;
                        double c = filter[j + 1][i + 1];
                        sum = (int) (sum + c * red);
                    }
                }
                int q = (int) Math.round(sum);
                int gray2 = temp | q << 16 | q << 8 | q;
                prosesimage2.setRGB(u, v, gray2);
            }
        }
        image1.setIcon(new ImageIcon(prosesimage));
        image2.setIcon(new ImageIcon(prosesimage2));
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
        image2.setEnabled(true);
        zoom2.setEnabled(true);
        zoomdes2.setEnabled(true);
        image = new ImageIcon(sumberGambar).getImage();
        size = new Dimension();
        size.width = image.getWidth(null);
        size.height = image.getHeight(null);
        setPreferredSize(size);

        if (zoom2.getValue() == 1) {
            zoom2.setValue(Integer.parseInt(zoomdes1.getText()));
        } else {
            zoom2.setValue(Integer.parseInt(zoomdes2.getText()));
        }

        prosesimage = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        prosesimage2 = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        Graphics g = prosesimage.getGraphics();
        g.drawImage(image, 0, 0, size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, null);

        double filter[][] = {
            {1, 1, 1},
            {1, 4, 1},
            {1, 1, 1}
        };
        for (int x = 0; x < size.width * zoom2.getValue() / 100; x++) {
            for (int y = 0; y < size.height * zoom2.getValue() / 100; y++) {
                int RGB = prosesimage.getRGB(x, y);
                int alpha = (RGB << 24) & 0xFF;
                int red = (RGB >> 16) & 0xFF;
                int green = (RGB >> 8) & 0xFF;
                int blue = (RGB >> 0) & 0xFF;
                int avg = (red + green + blue) / 3;
                int gray = alpha | avg << 16 | avg << 8 | avg;
                prosesimage.setRGB(x, y, gray);
            }
        }
        for (int v = 1; v <= size.height * zoom2.getValue() / 100 - 2; v++) {
            for (int u = 1; u <= size.width * zoom2.getValue() / 100 - 2; u++) {
                int sum = 0;
                int temp = 0;
                for (int j = -1; j <= 1; j++) {
                    for (int i = -1; i <= 1; i++) {
                        int RGB = prosesimage.getRGB(u + i, v + j);
                        int alpha = (RGB << 24) & 0xFF;
                        int red = (RGB >> 16) & 0xFF;
                        temp = alpha;
                        double c = filter[j + 1][i + 1];
                        sum = (int) (sum + c * red);
                    }
                }
                int q = (int) Math.round(sum / 12);
                int gray2 = temp | q << 16 | q << 8 | q;
                prosesimage2.setRGB(u, v, gray2);
            }
        }
        image1.setIcon(new ImageIcon(prosesimage));
        image2.setIcon(new ImageIcon(prosesimage2));
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        // TODO add your handling code here:
        image2.setEnabled(true);
        zoom2.setEnabled(true);
        zoomdes2.setEnabled(true);
        image = new ImageIcon(sumberGambar).getImage();
        size = new Dimension();
        size.width = image.getWidth(null);
        size.height = image.getHeight(null);
        setPreferredSize(size);

        if (zoom2.getValue() == 1) {
            zoom2.setValue(Integer.parseInt(zoomdes1.getText()));
        } else {
            zoom2.setValue(Integer.parseInt(zoomdes2.getText()));
        }

        prosesimage = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        prosesimage2 = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        Graphics g = prosesimage.getGraphics();
        g.drawImage(image, 0, 0, size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, null);

        double filter[][] = {
            {0, -1, 0},
            {-1, 5, -1},
            {0, -1, 0}
        };
        for (int x = 0; x < size.width * zoom2.getValue() / 100; x++) {
            for (int y = 0; y < size.height * zoom2.getValue() / 100; y++) {
                int RGB = prosesimage.getRGB(x, y);
                int alpha = (RGB << 24) & 0xFF;
                int red = (RGB >> 16) & 0xFF;
                int green = (RGB >> 8) & 0xFF;
                int blue = (RGB >> 0) & 0xFF;
                int avg = (red + green + blue) / 3;
                int gray = alpha | avg << 16 | avg << 8 | avg;
                prosesimage.setRGB(x, y, gray);
            }
        }
        for (int v = 1; v <= size.height * zoom2.getValue() / 100 - 2; v++) {
            for (int u = 1; u <= size.width * zoom2.getValue() / 100 - 2; u++) {
                int sum = 0;
                int temp = 0;
                for (int j = -1; j <= 1; j++) {
                    for (int i = -1; i <= 1; i++) {
                        int RGB = prosesimage.getRGB(u + i, v + j);
                        int alpha = (RGB << 24) & 0xFF;
                        int red = (RGB >> 16) & 0xFF;
                        temp = alpha;
                        double c = filter[j + 1][i + 1];
                        sum = (int) (sum + c * red);
                    }
                }
                int q = (int) Math.round(sum);
                int gray2 = temp | q << 16 | q << 8 | q;
                prosesimage2.setRGB(u, v, gray2);
            }
        }
        image1.setIcon(new ImageIcon(prosesimage));
        image2.setIcon(new ImageIcon(prosesimage2));
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        // TODO add your handling code here:
        image2.setEnabled(true);
        zoom2.setEnabled(true);
        zoomdes2.setEnabled(true);
        image = new ImageIcon(sumberGambar).getImage();
        size = new Dimension();
        size.width = image.getWidth(null);
        size.height = image.getHeight(null);
        setPreferredSize(size);

        if (zoom2.getValue() == 1) {
            zoom2.setValue(Integer.parseInt(zoomdes1.getText()));
        } else {
            zoom2.setValue(Integer.parseInt(zoomdes2.getText()));
        }

        prosesimage = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        prosesimage2 = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        Graphics g = prosesimage.getGraphics();
        g.drawImage(image, 0, 0, size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, null);

        double filter[][] = {
            {0, -1, 0},
            {-1, 4, -1},
            {0, -1, 0}
        };
        for (int x = 0; x < size.width * zoom2.getValue() / 100; x++) {
            for (int y = 0; y < size.height * zoom2.getValue() / 100; y++) {
                int RGB = prosesimage.getRGB(x, y);
                int alpha = (RGB << 24) & 0xFF;
                int red = (RGB >> 16) & 0xFF;
                int green = (RGB >> 8) & 0xFF;
                int blue = (RGB >> 0) & 0xFF;
                int avg = (red + green + blue) / 3;
                int gray = alpha | avg << 16 | avg << 8 | avg;
                prosesimage.setRGB(x, y, gray);
            }
        }
        for (int v = 1; v <= size.height * zoom2.getValue() / 100 - 2; v++) {
            for (int u = 1; u <= size.width * zoom2.getValue() / 100 - 2; u++) {
                int sum = 0;
                int temp = 0;
                for (int j = -1; j <= 1; j++) {
                    for (int i = -1; i <= 1; i++) {
                        int RGB = prosesimage.getRGB(u + i, v + j);
                        int alpha = (RGB << 24) & 0xFF;
                        int red = (RGB >> 16) & 0xFF;
                        temp = alpha;
                        double c = filter[j + 1][i + 1];
                        sum = (int) (sum + c * red);
                    }
                }
                int q = (int) Math.round(sum);
                int gray2 = temp | q << 16 | q << 8 | q;
                prosesimage2.setRGB(u, v, gray2);
            }
        }
        image1.setIcon(new ImageIcon(prosesimage));
        image2.setIcon(new ImageIcon(prosesimage2));
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        // TODO add your handling code here:
        image2.setEnabled(true);
        zoom2.setEnabled(true);
        zoomdes2.setEnabled(true);
        image = new ImageIcon(sumberGambar).getImage();
        size = new Dimension();
        size.width = image.getWidth(null);
        size.height = image.getHeight(null);
        setPreferredSize(size);

        if (zoom2.getValue() == 1) {
            zoom2.setValue(Integer.parseInt(zoomdes1.getText()));
        } else {
            zoom2.setValue(Integer.parseInt(zoomdes2.getText()));
        }

        prosesimage = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        prosesimage2 = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        Graphics g = prosesimage.getGraphics();
        g.drawImage(image, 0, 0, size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, null);

        double filter[][] = {
            {0.050, 0.75, 0.100, 0.75, 0.050},
            {0.75, 0.125, 0.175, 0.125, 0.75},
            {0.100, 0.150, 0.200, 0.150, 0.100},
            {0.75, 0.125, 0.175, 0.125, 0.75},
            {0.050, 0.75, 0.100, 0.75, 0.050}
        };

        for (int x = 0; x < size.width * zoom2.getValue() / 100; x++) {
            for (int y = 0; y < size.height * zoom2.getValue() / 100; y++) {
                int RGB = prosesimage.getRGB(x, y);
                int alpha = (RGB << 24) & 0xFF;
                int red = (RGB >> 16) & 0xFF;
                int green = (RGB >> 8) & 0xFF;
                int blue = (RGB >> 0) & 0xFF;
                int avg = (red + green + blue) / 3;
                int gray = alpha | avg << 16 | avg << 8 | avg;
                prosesimage.setRGB(x, y, gray);
            }
        }

        for (int v = 1; v <= size.height * zoom2.getValue() / 100 - 2; v++) {
            for (int u = 1; u <= size.width * zoom2.getValue() / 100 - 2; u++) {
                int sum = 0;
                int temp = 0;
                for (int j = -1; j <= 1; j++) {
                    for (int i = -1; i <= 1; i++) {
                        int RGB = prosesimage.getRGB(u + i, v + j);
                        int alpha = (RGB << 24) & 0xFF;
                        int red = (RGB >> 16) & 0xFF;
                        temp = alpha;
                        double c = filter[j + 1][i + 1];
                        sum = (int) (sum + c * red);
                    }
                }
                int q = (int) Math.round(sum / 9.0);
                int gray2 = temp | q << 16 | q << 8 | q;
                prosesimage2.setRGB(u, v, gray2);
            }
        }
        image1.setIcon(new ImageIcon(prosesimage));
        image2.setIcon(new ImageIcon(prosesimage2));
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
        // TODO add your handling code here:
        image2.setEnabled(true);
        zoom2.setEnabled(true);
        zoomdes2.setEnabled(true);
        image = new ImageIcon(sumberGambar).getImage();
        size = new Dimension();
        size.width = image.getWidth(null);
        size.height = image.getHeight(null);
        setPreferredSize(size);

        if (zoom2.getValue() == 1) {
            zoom2.setValue(Integer.parseInt(zoomdes1.getText()));
        } else {
            zoom2.setValue(Integer.parseInt(zoomdes2.getText()));
        }

        prosesimage = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        Graphics g = prosesimage.getGraphics();
        g.drawImage(image, 0, 0, size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, null);

        for (int x = 0; x < size.width * zoom2.getValue() / 100; x++) {
            for (int y = 0; y < size.height * zoom2.getValue() / 100; y++) {
                int RGB = prosesimage.getRGB(x, y);
                int alpha = (RGB << 24) & 0xFF;
                int red = (RGB >> 16) & 0xFF;
                int green = (RGB >> 8) & 0xFF;
                int blue = (RGB >> 0) & 0xFF;
                int avg = (red + green + blue) / 3;
                double r = Math.random();
                double p = Double.parseDouble(jTextField4.getText());
                avg = (int) (avg + r * 256 * p);
                if (avg > 256) {
                    avg = 255;
                }
                int gray = alpha | avg << 16 | avg << 8 | avg;
                prosesimage.setRGB(x, y, gray);
            }
        }
        image2.setIcon(new ImageIcon(prosesimage));
        try {
            ImageIO.write(prosesimage, "png", new File("Noise Uniform"));
        } catch (java.io.IOException ex) {
            System.err.println(ex);
        }
    }//GEN-LAST:event_jMenuItem14ActionPerformed

    private void jMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
        // TODO add your handling code here:
        image2.setEnabled(true);
        zoom2.setEnabled(true);
        zoomdes2.setEnabled(true);
        image = new ImageIcon(sumberGambar).getImage();
        size = new Dimension();
        size.width = image.getWidth(null);
        size.height = image.getHeight(null);
        setPreferredSize(size);

        if (zoom2.getValue() == 1) {
            zoom2.setValue(Integer.parseInt(zoomdes1.getText()));
        } else {
            zoom2.setValue(Integer.parseInt(zoomdes2.getText()));
        }

        prosesimage = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        Graphics g = prosesimage.getGraphics();
        g.drawImage(image, 0, 0, size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, null);

        for (int x = 0; x < size.width * zoom2.getValue() / 100; x++) {
            for (int y = 0; y < size.height * zoom2.getValue() / 100; y++) {
                int RGB = prosesimage.getRGB(x, y);
                int alpha = (RGB << 24) & 0xFF;
                int red = (RGB >> 16) & 0xFF;
                int green = (RGB >> 8) & 0xFF;
                int blue = (RGB >> 0) & 0xFF;
                int avg = (red + green + blue) / 3;
                double r = Math.random();
                double p = Double.parseDouble(jTextField4.getText());
                if (r < p) {
                    avg = 255;
                }
                int gray = alpha | avg << 16 | avg << 8 | avg;
                prosesimage.setRGB(x, y, gray);
            }
        }
        image2.setIcon(new ImageIcon(prosesimage));
        try {
            ImageIO.write(prosesimage, "png", new File("Noise Salt & Pepper"));
        } catch (java.io.IOException ex) {
            System.err.println(ex);
        }
    }//GEN-LAST:event_jMenuItem15ActionPerformed

    private void jMenuItem16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem16ActionPerformed
        // TODO add your handling code here:
        image2.setEnabled(true);
        zoom2.setEnabled(true);
        zoomdes2.setEnabled(true);
        image = new ImageIcon(sumberGambar).getImage();
        size = new Dimension();
        size.width = image.getWidth(null);
        size.height = image.getHeight(null);
        setPreferredSize(size);

        if (zoom2.getValue() == 1) {
            zoom2.setValue(Integer.parseInt(zoomdes1.getText()));
        } else {
            zoom2.setValue(Integer.parseInt(zoomdes2.getText()));
        }

        prosesimage = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        Graphics g = prosesimage.getGraphics();
        g.drawImage(image, 0, 0, size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, null);

        for (int x = 0; x < size.width * zoom2.getValue() / 100; x++) {
            for (int y = 0; y < size.height * zoom2.getValue() / 100; y++) {
                int RGB = prosesimage.getRGB(x, y);
                int alpha = (RGB << 24) & 0xFF;
                int red = (RGB >> 16) & 0xFF;
                int green = (RGB >> 8) & 0xFF;
                int blue = (RGB >> 0) & 0xFF;
                int avg = (red + green + blue) / 3;
                double r = Math.random();
                double p = Double.parseDouble(jTextField4.getText());
                if (r < p) {
                    avg = 0;
                }
                int gray = alpha | avg << 16 | avg << 8 | avg;
                prosesimage.setRGB(x, y, gray);
            }
        }
        image2.setIcon(new ImageIcon(prosesimage));
        try {
            ImageIO.write(prosesimage, "png", new File("Noise Salt & Pepper"));
        } catch (java.io.IOException ex) {
            System.err.println(ex);
        }
    }//GEN-LAST:event_jMenuItem16ActionPerformed

    private void jMenuItem17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem17ActionPerformed
        // TODO add your handling code here:
        image2.setEnabled(true);
        zoom2.setEnabled(true);
        zoomdes2.setEnabled(true);
        image = new ImageIcon(sumberGambar).getImage();
        size = new Dimension();
        size.width = image.getWidth(null);
        size.height = image.getHeight(null);
        setPreferredSize(size);

        int Sn = 0;
        int avg = 0;
        int Ss = 0;
        int Sn2 = 0;
        int Ss2 = 0;

        if (zoom2.getValue() == 1) {
            zoom2.setValue(Integer.parseInt(zoomdes1.getText()));
        } else {
            zoom2.setValue(Integer.parseInt(zoomdes2.getText()));
        }

        prosesimage = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        prosesimage2 = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);
        prosesimage3 = new BufferedImage(size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, BufferedImage.TYPE_INT_RGB);

        Graphics g = prosesimage.getGraphics();
        g.drawImage(image, 0, 0, size.width * zoom2.getValue() / 100, size.height * zoom2.getValue() / 100, null);

        for (int x = 0; x < size.width * zoom2.getValue() / 100; x++) {
            for (int y = 0; y < size.height * zoom2.getValue() / 100; y++) {
                int RGB = prosesimage.getRGB(x, y);
                int alpha = (RGB << 24) & 0xFF;
                int red = (RGB >> 16) & 0xFF;
                int green = (RGB >> 8) & 0xFF;
                int blue = (RGB >> 0) & 0xFF;
                avg = (red + green + blue) / 3;
                double r = Math.random();
                double p = Double.parseDouble(jTextField4.getText());
                int avg2 = (int) (avg + r * 256 * p);
                if (avg2 > 256) {
                    avg = 255;
                }
                int gray = alpha | avg2 << 16 | avg2 << 8 | avg2;
                prosesimage2.setRGB(x, y, gray);
                Sn = Sn + Math.abs(avg2 - avg);
                Ss = Ss + Math.abs(avg);
            }
        }
        image2.setIcon(new ImageIcon(prosesimage));
        double snr = 10 * Math.log10(Ss / Sn);
        jTextField5.setText(Double.toString(snr));

        for (int v = 1; v <= size.height * zoom2.getValue() / 100 - 2; v++) {
            for (int u = 1; u <= size.width * zoom2.getValue() / 100 - 2; u++) {
                int sum = 0;
                int temp = 0;
                for (int j = -1; j <= 1; j++) {
                    for (int i = -1; i <= 1; i++) {
                        int RGB = prosesimage2.getRGB(u + i, v + j);
                        int alpha = (RGB << 24) & 0xFF;
                        int red = (RGB >> 16) & 0xFF;
                        temp = alpha;
                        sum = sum +red;
                    }
                }
                int q = (int) Math.round(sum / 9.0);
                int gray2 = temp | q << 16 | q << 8 | q;
                prosesimage3.setRGB(u, v, gray2);
                Sn2 = Sn2 + Math.abs(q - avg);
            }
        }
        if (zoom3.getValue() == 1) {
            zoom3.setValue(Integer.parseInt(zoomdes1.getText()));
        } else {
            zoom3.setValue(Integer.parseInt(zoomdes2.getText()));
        }
        jFrame1.setVisible(true);
        image3.setEnabled(true);
        zoom3.setEnabled(true);
        zoomdes3.setEnabled(true);
        image3.setIcon(new ImageIcon(prosesimage3));
        double snr2 = 10*Math.log10(Ss/Sn2);
        jTextField6.setText(Double.toString(snr2));
    }//GEN-LAST:event_jMenuItem17ActionPerformed

    void drawHistogram() {
        BufferedImage test = null;
        try {
            test = ImageIO.read(new File(sumberGambar));
        } catch (IOException ex) {
            System.out.println("error");
        }
        int width = test.getWidth();
        int height = test.getHeight();
        int count[][] = new int[4][0x100];
        int RED = 0;
        int BLUE = 1;
        int GREEN = 2;
        int total = width * height;
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                int color = test.getRGB(i, j);
                int cred = (color & 0x00ff0000) >> 16;
                int cgreen = (color & 0x0000ff00) >> 8;
                int cblue = color & 0x000000ff;
                int gry = (cred + cblue + cgreen) / 3;
                count[RED][cred]++;
                count[BLUE][cblue]++;
                count[GREEN][cgreen]++;
                count[3][gry]++;
            }
        }
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        for (int f = 0; f < 0x100; f++) {
            dataset.addValue(count[0][f], "Red", new Integer(f));
            dataset.addValue(count[1][f], "Blue", new Integer(f));
            dataset.addValue(count[2][f], "Green", new Integer(f));
            dataset.addValue(count[3][f], "Black", new Integer(f));
        }
        JFreeChart chart = ChartFactory.createBarChart("Histogram RGB", "Nilai",
                "frekuensi", dataset, PlotOrientation.VERTICAL, false, true, false);
        ChartFrame frame = new ChartFrame("Lihat Histogram", chart);

        chart.setBackgroundPaint(Color.white);
        final CategoryPlot plot = (CategoryPlot) chart.getPlot();
        plot.setBackgroundPaint(Color.WHITE);
        plot.setRangeGridlinePaint(Color.white);

        frame.setSize(500, 350);
        frame.setVisible(true);
        frame.setLocation(380, 200);
        frame.setTitle(sumberGambar);
        String status = frame.getTitle();
    }

    void drawHistogram(BufferedImage test, String jd1) {
        int width = test.getWidth();
        int height = test.getHeight();
        int count[][] = new int[4][0x100];
        int RED = 0;
        int BLUE = 1;
        int GREEN = 2;
        int total = width * height;
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                int color = test.getRGB(i, j);
                int cred = (color & 0x00ff0000) >> 16;
                int cgreen = (color & 0x0000ff00) >> 8;
                int cblue = color & 0x000000ff;
                int gry = (cred + cgreen + cblue) / 3;
                count[RED][cred]++;
                count[BLUE][cblue]++;
                count[GREEN][cgreen]++;
                count[3][gry]++;
            }
        }
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        for (int f = 0; f < 0x100; f++) {
            dataset.addValue(count[0][f], "Red", new Integer(f));
            dataset.addValue(count[1][f], "Blue", new Integer(f));
            dataset.addValue(count[2][f], "Green", new Integer(f));
            dataset.addValue(count[3][f], "Black", new Integer(f));
        }

        JFreeChart chart = ChartFactory.createBarChart("Histogram RGB", "Nilai",
                "Frekuensi", dataset, PlotOrientation.VERTICAL, false, true, false);
        ChartFrame frame = new ChartFrame("Lihat Histogram", chart);
        chart.setBackgroundPaint(Color.white);
        final CategoryPlot plot = (CategoryPlot) chart.getPlot();
        plot.setBackgroundPaint(Color.WHITE);
        plot.setRangeGridlinePaint(Color.white);
        frame.setSize(500, 350);
        frame.setVisible(true);
        frame.setLocation(380, 200);
        frame.setTitle(jd1);
        String status = frame.getTitle();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(membangkitkan_noise.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(membangkitkan_noise.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(membangkitkan_noise.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(membangkitkan_noise.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new membangkitkan_noise().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser fc;
    private javax.swing.JLabel image1;
    private javax.swing.JLabel image2;
    private javax.swing.JLabel image3;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollBar jScrollBar2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JSlider zoom1;
    private javax.swing.JSlider zoom2;
    private javax.swing.JSlider zoom3;
    private javax.swing.JTextField zoomdes1;
    private javax.swing.JTextField zoomdes2;
    private javax.swing.JTextField zoomdes3;
    // End of variables declaration//GEN-END:variables
}
